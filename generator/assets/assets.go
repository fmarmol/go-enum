// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl (4.133kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4b\x6f\xdb\x46\x10\x3e\x8b\xbf\x62\x42\x38\x05\x99\x2a\x94\x8b\xde\x12\xe8\x94\x87\x91\x20\xb1\x13\xd8\x6d\x0f\x86\x11\xac\xc9\xa1\xbc\x35\xb9\x4b\xef\xae\x64\x19\x2c\xff\x7b\x31\xbb\xcb\x87\x28\x4a\xf1\xa1\xa8\x0f\x86\xc8\x9d\xe7\x37\xdf\xcc\x0e\xeb\xfa\x35\x64\x98\x73\x81\x10\xde\x21\xcb\x50\x85\x4d\x13\x2c\x16\xf0\x4e\x66\x08\x2b\x14\xa8\x98\xc1\x0c\x6e\x9f\x60\x25\x5f\xa3\x58\x97\x74\xf8\xfe\x02\xce\x2f\xae\xe0\xc3\xfb\x4f\x57\x2f\x82\xa0\x62\xe9\x3d\x5b\x21\xd4\x75\xe2\x7f\x36\x4d\x10\xf0\xb2\x92\xca\x40\x14\x00\x00\x84\x79\x69\x42\xf7\x8b\x4b\xff\x43\x1b\x95\x4a\xb1\xf1\x4f\xa8\x94\x54\xba\x7d\x10\xa9\xcc\xb8\x58\x2d\xfe\xd6\x52\x84\x41\x1c\xd4\x35\x8a\x0c\x5e\x93\xdd\x61\xc4\x14\x0f\xc5\x9b\x4a\xa1\xc9\x15\x9d\x9d\xd0\xcb\x73\x56\x22\xbc\x59\x42\x42\x0f\x89\x7d\x22\x65\x7b\xbe\x61\x4a\xd3\x59\xc6\x53\x03\x61\xc1\xb4\x91\x79\xae\xd1\x84\x70\xea\x85\x40\x31\xb1\x42\x38\x51\x9f\x44\x86\xdb\x39\xa9\x14\xeb\x81\xbd\x3f\xe9\x51\x43\xd3\x04\x33\x6b\x91\x6c\x5c\x58\x1b\x24\x53\x15\xeb\xf4\x7e\xd7\xb0\xf3\xf9\x0f\xe4\x5c\x69\x03\x4d\x53\xd7\x70\x22\x3b\x05\xbd\xbe\xf5\x2e\x9c\xe5\xd6\xb1\x77\x00\x3c\x07\x7c\x68\x25\x6c\x2e\xe1\x8f\xb0\x69\x16\x0b\xb8\xbc\xe7\x55\x85\x19\xd8\xa3\xba\xc6\x42\xa3\x7d\x5f\xd7\x5e\xfa\x9b\xc2\x9c\x6f\x31\x23\xad\xa6\x01\xae\x81\xd1\x61\x0b\x51\xd3\x80\xcc\xc1\x3c\x55\xd8\xab\xb8\xf7\x16\xf0\x36\x41\x9e\xb7\xde\xdf\xc9\xb2\x44\x61\xe8\x60\xe8\x66\xf0\x9a\xe4\x9d\x2a\x55\xf2\x50\x20\x7d\x56\x3e\xd5\x53\x8b\xca\x30\xb0\x25\x70\x69\x98\x13\x14\x08\xa7\x1d\x62\x4d\x03\xbf\xc2\x00\xc1\x2e\x58\x07\x80\x97\x1f\x16\x65\x28\xb9\xef\xe2\xa0\xb5\x93\x1f\xb6\x3a\x64\xc0\xd6\x6f\xb7\xa4\xee\x87\x27\x95\xcb\x38\x26\x76\x82\xc1\xb2\x2a\x98\x41\xcb\x70\x2e\x56\xa8\x42\x48\xa8\x96\xd4\x39\xdf\x98\xd2\x58\xd7\x3d\x2f\x9b\x06\x98\x21\x15\xa3\xc1\x48\xa0\x8e\x40\x65\x80\x81\x53\xa6\x77\x54\xb2\xa1\x42\x90\xaf\x45\x3a\x65\x29\x12\x44\x0e\xa7\x18\x43\xb4\x7b\x38\x07\xdb\x62\x31\xd4\xc1\x8c\xe7\xb0\x9d\x83\xbc\xa7\xfc\x7e\xec\x8a\x59\x06\x5e\x93\xa1\x9b\xb7\x24\x51\x07\xb3\x99\x42\xb3\x56\x82\x54\x04\x2f\x82\x99\xad\x32\xcf\x21\x21\x29\x6d\x7b\xa6\x15\x19\xc5\x73\x1a\xcf\x21\x2f\x4d\xf2\x81\x3c\xe7\x51\xf8\x52\x13\x05\x85\xa4\xfc\x36\xac\xe0\x19\x8c\x63\x34\xea\x09\xae\x5f\xea\x9b\x70\x0e\x64\x7d\xee\xb3\xd1\xc9\x67\xc9\x45\x34\x8a\x95\xfe\xeb\x39\x84\x73\x08\xe3\xd8\x53\x8f\x18\xf0\x1f\x46\xe4\xe3\x88\x87\xc4\xb6\x43\x88\x68\x96\x94\x4c\xe9\x3b\x56\x80\x1b\x99\x5f\xdd\xd3\x15\x6e\x0d\xf0\xb2\x2a\x90\x7a\x42\x83\xb9\x43\x30\xf4\xce\x4b\x17\xa8\xa0\x44\x73\x27\x33\x57\xc8\x68\x3b\xf2\x19\x0f\x2d\x45\x31\x44\xd7\x37\xb7\x4f\x06\x87\x05\xf4\xc9\xb9\x83\x68\x9b\x5c\x5a\x94\xa2\x38\x76\x25\x72\x5c\xfb\x43\x94\x3f\x89\x68\x2d\x0e\xc7\xf4\x6a\x1c\xd4\x8e\xb9\xc8\xea\x3b\xff\xb1\x0b\x8c\xe2\x12\x7e\xee\xba\xaa\x59\xa1\x38\x98\x99\xb2\xb2\xc1\xd3\xc9\x21\xda\xc6\x96\x95\x24\xf4\x62\x49\x39\x0c\x89\x87\x4a\x59\xd6\xbd\xda\xc2\x12\x4c\x59\x75\xf9\xf7\xb9\x7a\xc4\xce\xbe\x7f\x19\x27\xba\x7a\x28\x56\x28\x80\x0b\x83\x2a\x67\x29\xda\x04\x0f\x63\x7e\xf6\xfd\x4b\xf4\x08\x5c\x26\x7f\x29\x6e\xd0\xa2\x4d\x83\x8c\x38\xf3\xb1\x52\x5c\x98\x3c\x7a\xb4\xac\xa4\x4e\x4d\xbe\xaf\xe5\x2e\xfe\xf1\x18\xfb\x36\x22\x66\x6c\x4c\x47\x43\x3a\x0c\x39\x45\xb5\xe9\x15\xea\xa6\xc7\x9c\xa2\xd3\x46\xb5\xed\xbc\x49\x22\x3f\x00\xec\x09\xcf\xe1\x85\xed\x62\xf0\x7f\x3d\xa4\x52\xe9\xe4\x1c\x1f\x23\x7b\x8b\x6a\x28\xd7\xda\xc0\x6d\x3b\x3e\x74\xe8\xf4\xdd\x18\x6f\x07\x40\xb2\xcb\x01\x4f\x3f\x6d\x54\x97\xb7\x47\xf1\xf3\xe5\xc5\xf9\xb0\x10\x74\x8f\x3f\xbb\x04\xa4\x3c\x49\xfb\x41\x28\xbd\xeb\x03\x75\x98\x6c\x84\xe7\x85\x75\xb8\x0c\x36\xb2\x8c\x19\xb6\xcf\xfc\x0d\x53\xa0\x3d\x78\x1d\x95\xdf\x2c\xad\x8b\x1e\x36\xab\x3c\x87\x5f\x74\xfc\xf6\x38\xd7\x9f\x81\xba\xc3\xbc\xbd\xa8\xdb\x91\xa4\x1f\xda\x71\x74\x99\x32\x31\x6e\x06\x7a\x27\x50\xf5\x39\x27\x87\xfb\x9d\x64\x23\xb7\xf9\x4c\x12\xcf\xa6\x3c\xb8\x71\x82\x60\xa6\x1f\xb9\x49\xef\x60\x63\x89\x68\xef\xfd\x88\x96\x0b\x3b\xb2\x52\xa6\x5b\xc9\x37\xc1\xcc\x4d\x8a\x25\x6c\xfc\x81\x4b\x6a\x70\xe0\x27\xc8\x26\xf6\x02\x82\x17\x74\x6a\x47\xc0\xde\x4c\xef\xe1\xf3\x17\xd4\xff\x32\x73\xdc\xb2\x36\x42\x38\x53\x7c\x83\xca\x9d\x4d\xe2\x3c\x86\xd9\x4a\x12\xdd\x9d\xa6\x5b\x01\x27\x66\x7d\x4f\xee\x96\xda\xe3\xd2\xe7\x05\x5b\xb5\xb5\xc7\xbd\x81\x7f\x26\x0b\x26\x56\x40\x42\x7e\xcd\xec\x82\x03\x8a\xed\x18\x13\xd0\x10\x11\xba\xcd\xa2\x67\xc0\x51\x88\x37\xac\x88\x3d\x80\x9b\x60\x88\xab\x83\xef\xec\x78\x8c\x67\x68\xcc\x10\xc1\x9f\x05\x79\x86\x74\x57\x0e\x98\x3a\xc0\xee\xd5\xd6\xfb\xbc\xa2\x55\x77\x7c\x41\x70\x73\xb7\xbe\x4d\x52\x59\x2e\x74\x95\xff\xf6\xfb\xa2\xfa\x48\x40\x8e\x30\x3a\xe2\x99\x8c\x46\x71\xbb\xb0\xf5\x5e\xc3\xd1\x2a\xb1\x5b\x32\xff\x63\xe7\x7b\xa6\x5b\x18\xbb\x6f\x9a\x89\x8d\x07\x96\x64\xd9\xbb\xe3\xf9\x93\xfb\x28\x01\x72\xd0\x32\xc1\x2d\x66\x4d\x43\x1d\x3a\xb5\x33\xd9\x1e\x12\xac\xec\xb4\xfd\x76\x3a\x25\xea\x92\xa1\x0f\x87\x82\x6b\x43\xdf\x0b\x95\xd4\x9a\xdf\x16\x6d\x37\xbb\x4e\xd7\x74\xb2\xab\xef\x21\x9b\x30\x1a\xc5\x70\x7d\xd3\xe3\x65\xca\x8a\x38\x54\xb2\x7b\x8c\xda\xf7\x73\x28\x70\x7a\xe1\xa3\x55\x2f\x95\xd5\x53\x64\x5b\x7c\x52\xa2\x2b\x01\x35\xae\xfd\xa2\xeb\x3e\x1f\x27\x20\xf9\xca\x2a\x0b\x08\x94\xac\x1a\xe2\x69\x21\x71\x4d\xb7\x37\x47\x7d\xa1\x9e\xd3\xe0\x6d\xdb\x0e\x08\xc2\xf3\xe1\x95\xbd\x1f\xce\xf5\x76\x6f\xf9\xd6\xc6\xcd\x23\xff\x48\xfb\xc8\xa5\xdf\x47\x46\x3c\x8b\x5e\x66\x71\x38\x87\xad\xbd\x1e\x26\xd2\x75\xc4\xb6\x09\xd3\xfe\x37\x48\x39\x29\xe4\x23\x2a\x3b\x6e\x77\x38\xfa\x6f\x00\x00\x00\xff\xff\x3e\xa9\x27\xee\x25\x10\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 4133, mode: os.FileMode(0644), modTime: time.Unix(1577181312, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xff, 0xcb, 0x3, 0x52, 0x52, 0xf0, 0x5a, 0xa4, 0x42, 0x31, 0x7a, 0x63, 0xf3, 0xec, 0x1f, 0xa8, 0xda, 0xe9, 0xbd, 0xdf, 0xa, 0xd, 0xc1, 0x5, 0x6a, 0x76, 0x6d, 0x4f, 0x4c, 0x38, 0x81, 0x23}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
